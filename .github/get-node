#!/usr/bin/env bash

# Exit immediately if a command fails and is not controlled.
set -e

# Save program arguments to later pass on init binary.
args="$@"

# Common urls.
new_issue_url="https://github.com/guackamolly/zero-monitor/issues/new"
latest_release_url="https://api.github.com/repos/guackamolly/zero-monitor/releases/latest"

# Installation directory and program paths.
install_dir="$HOME/.config/zero-monitor"
bin_path="$install_dir/node"
init_bin_path="$install_dir/init"

if [ ! -d "$install_dir" ]; then
    mkdir -p "$install_dir"
fi

fatal() {
    printf "$1\n"
    exit 1
}

exec_bin() {
    if [[ -z "$args" ]]; then
        "$init_bin_path" "$args"
    fi

    exec "$bin_path" "$args"
}

download() {
    url="$1"
    bin_name="$(echo ${url##*/} | cut -d '_' -f1)"

    printf "Downloading $bin_name ...\n"
    curl -s -L "$url" -o "$install_dir/$bin_name"
    chmod +x "$install_dir/$bin_name"
}

# Query host OS and CPU architecture to precisely select binary to download.
case "$(uname -s)" in
Linux) os="linux" ;;
Darwin) os="darwin" ;;
*) fatal ""$(uname -s)" isn't supported right now, please raise an issue to get support on this OS.\n$new_issue_url" ;;
esac

case "$(uname -m)" in
x86_64) arch="amd64" ;;
i386) arch="386" ;;
aarch64) arch="arm64" ;;
arm64) arch="arm64" ;;
armv7l) arch="arm" ;;
*) fatal ""$(uname -m)" isn't supported right now, please raise an issue to get support on this architecture.\n$new_issue_url" ;;
esac

# Head latest release
response=$(curl -s "$latest_release_url")
status="$(echo $response | jq .status)"
if [[ "$status" == '"404"' ]]; then
    fatal "Failed to head release, please raise an issue to alert maintainers about this bug.\n$new_issue_url"
fi

latest_release_version="$(echo $response | jq .tag_name)"
if [ -z "$latest_release_version" ]; then
    fatal "Failed to extract release version, please raise an issue to alert maintainers about this bug.\n$new_issue_url"
fi

# If local target binary version is different than the latest release version, download it again.
if ! [[ -f "$bin_path" && "$latest_release_version" != "$($bin_path -version)" ]]; then
    download "$(echo $response | jq -r '.assets[] | select(.name == "node_'${os}'_'${arch}'") | .browser_download_url')"
fi

# If local init binary version is different than the latest release version, download it again.
if ! [[ -f "$init_bin_path " && "$latest_release_version" != "$($init_bin_path -version)" ]]; then
    download "$(echo $response | jq -r '.assets[] | select(.name == "init_'${os}'_'${arch}'") | .browser_download_url')"
fi

# Run the binary.
exec_bin
