#!/usr/bin/env bash

# Save program arguments to later pass on binary.
args="$@"

# Save current user to later pass on launcher.
user="$USER"

# Common urls.
new_issue_url="https://github.com/guackamolly/zero-monitor/issues/new"
latest_release_url="https://api.github.com/repos/guackamolly/zero-monitor/releases/latest"
jq_release_url="https://github.com/jqlang/jq/releases/download/jq-1.7.1"

# Installation directory and program paths.
install_dir="$HOME/.config/zero-monitor"
bin_path="$install_dir/master"
jq_bin_path="$install_dir/jq"
launcher_bin_path="$install_dir/launcher"

if [ ! -d "$install_dir" ]; then
    mkdir -p "$install_dir"
fi

fatal() {
    printf "$1\n"
    exit 1
}

jq() {
    "$jq_bin_path" "$@"
}

launcher() {
    local use_sudo=""
    if [[ "$1" == "root" ]]; then
        use_sudo="sudo"
    fi

    $use_sudo "$launcher_bin_path" \
        --name="zero-monitor-master" \
        --description="Service for lauching zero-monitor master agent at startup" \
        --user="$user" \
        --exec="$bin_path"
}

exec_bin() {
    exec "$bin_path" "$args"
}

download() {
    url="$1"
    if [ -z "$url" ]; then
        fatal "Failed to extract url, please raise an issue to alert maintainers about this bug.\n$new_issue_url"
    fi
    bin_name="$(echo ${url##*/} | cut -d '_' -f1 | cut -d '-' -f1)"

    printf "Downloading $bin_name ...\n"
    wget -O "$install_dir/$bin_name" "$url"
    chmod +x "$install_dir/$bin_name"
}

schedule_launcher() {
    launcher
    ec=$?

    if [ $ec = 60 ]; then
        printf "Couldn't schedule a system-service for launching master agent at startup because no supported service manager exists."
    elif [ $ec = 61 ]; then
        printf "Scheduling system-service for launching master agent at startup requires elevated privileges.\nPress ctrl+c to abort...\n"
        launcher "root"
    fi
}

# Query host OS and CPU architecture to precisely select binary to download.
case "$(uname -s)" in
Linux) os="linux" ;;
Darwin) os="darwin" ;;
*) fatal ""$(uname -s)" isn't supported right now, please raise an issue to get support on this OS.\n$new_issue_url" ;;
esac

case "$(uname -m)" in
x86_64) arch="amd64" ;;
i386) arch="386" ;;
aarch64) arch="arm64" ;;
arm64) arch="arm64" ;;
armv7l) arch="arm" ;;
*) fatal ""$(uname -m)" isn't supported right now, please raise an issue to get support on this architecture.\n$new_issue_url" ;;
esac

# Download jq if not available.
if [ ! -f "$jq_bin_path" ]; then
    download "${jq_release_url}/jq-${os}-${arch}"
fi

# Head latest release
response=$(wget -qO- "$latest_release_url")
if ! [[ $? == 0 ]]; then
    fatal "Failed to head release, please raise an issue to alert maintainers about this bug.\n$new_issue_url"
fi

latest_release_version="$(echo $response | jq -r .tag_name)"
if [ -z "$latest_release_version" ]; then
    fatal "Failed to extract release version, please raise an issue to alert maintainers about this bug.\n$new_issue_url"
fi

# If local target binary version is different than the latest release version, download it again.
if [ ! -f "$bin_path" ] || [ "$latest_release_version" != "$($bin_path -version)" ]; then
    download "$(echo $response | jq -r '.assets[] | select(.name == "master_'${os}'_'${arch}'") | .browser_download_url')"
fi

# Same thing for launcher.
if [ ! -f "$launcher_bin_path" ]; then
    download "$(echo $response | jq -r '.assets[] | select(.name == "launcher_'${os}'_'${arch}'") | .browser_download_url')"
fi

# Try creating system service that launches binary at startup.
schedule_launcher

# Run the binary
exec_bin
