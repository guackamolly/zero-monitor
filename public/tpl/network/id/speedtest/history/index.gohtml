{{ define "network/:id/speedtest/history" }}
<!DOCTYPE html>
<html>
    <head>
        <title>Zero Monitor - {{.Hostname}} - Speedtest History</title>
        <base href="/">
        <meta charset='utf-8'>
        <meta http-equiv='X-UA-Compatible' content='IE=edge'>
        <meta name='viewport' content='width=device-width, initial-scale=1'>

        <meta name="title"
            content="Zero Monitor - {{.Hostname}} - Speedtest History">
        <meta name="description" content>

        <!-- Facebook Meta Tags -->
        <meta property="og:url" content>
        <meta property="og:type" content="website">
        <meta property="og:title"
            content="Zero Monitor - {{.Hostname}} - Speedtest History">
        <meta property="og:description" content>
        <meta property="og:image"
            content>

        <!-- Twitter Meta Tags -->
        <meta name="twitter:card" content="summary_large_image">
        <meta property="twitter:domain" content="guackamollyapps.com">
        <meta property="twitter:url" content>
        <meta name="twitter:title"
            content="Zero Monitor - {{.Hostname}} - Speedtest History">
        <meta name="twitter:description" content>
        <meta name="twitter:image"
            content>

        <link rel="icon" href="static/favicon.ico" sizes="any">
        <link rel="apple-touch-icon" href="static/apple-touch-icon.png">
        <link rel='stylesheet' type='text/css' media='screen' href='index.css'>
        <link rel='stylesheet' type='text/css' media='print' href='index.css'>
        {{ if .Chart }}
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                // Setups mouse events for showing a chart tooltip.
                function setupChartTooltipInteractivity() {
                    const tooltip = document.getElementById('chart-tooltip');
                    if (!tooltip) {
                        return;
                    }
                
                    function showChartTooltip(evt, text) {
                        tooltip.innerHTML = text;
                        tooltip.style.display = "block";
                        tooltip.style.left = evt.pageX + 10 + 'px';
                        tooltip.style.top = evt.pageY + 10 + 'px';
                    }
                
                    function hideChartTooltip() {
                        tooltip.style.display = "none";
                    }
                
                    const circles = document.querySelectorAll('circle');
                    for (const circle of circles) {
                        const title = circle.firstElementChild;
                        if (!title || title.nodeName !== 'title') {
                            continue;
                        }
                
                        circle.onmouseover = (evt) => showChartTooltip(evt, title.textContent);
                        circle.onclick = (evt) => showChartTooltip(evt, title.textContent);
                        circle.onmouseout = (evt) => hideChartTooltip(evt);
                
                        // prevent default browser tooltip
                        circle.removeChild(title);
                    }
                }

                // Matches a width value and returns the closest breakpoint.
                function breakpointResolver(width) {
                    if (width <= 560) {
                        return 560;
                    }
            
                    if (width > 560 && width < 860) {
                        return 860;
                    }
            
                    return 1440;
                }

                // Renders a chart based on a breakpoint.
                async function updateChart(breakpoint) {
                    try {
                        const resp = await fetch(`${window.location.protocol}//${window.location.host}${window.location.pathname}/chart?breakpoint=${breakpoint}`);
                        if (resp.status !== 200) {
                            return;
                        }
            
                        const html = await resp.text();
                        document.getElementById('speedtest-history-chart').outerHTML = html;
                        setupChartTooltipInteractivity();
                    } catch (error) {
                        console.error(error);
                    }
                }

                const currentChartBreakpoint = () => Number.parseInt(document.getElementById('speedtest-history-chart').getAttribute('breakpoint') ?? `${breakpointResolver(window.innerWidth)}`);
            
                // Observes window resize to render best looking chart for the window width.
                let breakpoint = breakpointResolver(window.innerWidth);
                if(currentChartBreakpoint() !== breakpoint) {
                    updateChart(breakpoint);
                }
                window.addEventListener('resize', function (ev) {
                    const newWidth = window.innerWidth;
                    const newBreakpoint = breakpointResolver(newWidth);
                    if (newBreakpoint === breakpoint) {
                        return;
                    }
            
                    breakpoint = newBreakpoint;
                    updateChart(breakpoint);
                });

                setupChartTooltipInteractivity();
            });
        </script>
        {{ end }}
    </head>

    <body>
        <header>
            <div class="logo">
                <a class="logo-top" href="/">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32"
                        height="32" fill="#000000" viewBox="0 0 256 256"><path
                            d="M240,128a8,8,0,0,1-8,8H204.94l-37.78,75.58A8,8,0,0,1,160,216h-.4a8,8,0,0,1-7.08-5.14L95.35,60.76,63.28,131.31A8,8,0,0,1,56,136H24a8,8,0,0,1,0-16H50.85L88.72,36.69a8,8,0,0,1,14.76.46l57.51,151,31.85-63.71A8,8,0,0,1,200,120h32A8,8,0,0,1,240,128Z"></path></svg>
                    <span>Zero Monitor</span>
                </a>

                <a class="logo-text" href="https://guackamollyapps.com"
                    target="_blank">by
                    Guackamolly Apps</a>
            </div>

            <nav>
                <a href="dashboard">Dashboard</a>
                <a href="network">Network</a>
                <a href="settings">Settings</a>
            </nav>
        </header>
        <main>
            <section class="main-content-1">
                <h1>Speedtest History</h1>
                <p>
                    This page show the speedtest history of node
                    <b>{{.Hostname}}</b>. Only the {{.Limit}} most recent
                    speedtests are
                    listed.
                </p>
                {{ if gt (len .Speedtests) 0 }}
                <p>
                    This node is averaging a download and upload speed of
                    <b>{{.AverageDownloadSpeed}}</b>/<b>{{.AverageUploadSpeed}}</b>.
                    <br>
                    {{ with .PeakDownloadSpeedtest }}
                    The highest download speed was registered on
                    <a
                        href="network/{{.NodeID}}/speedtest/{{.ID}}"><b>{{.TakenAt}}</b></a>.
                    {{ end }}
                </p>
                {{ end }}
                <div class="divider"></div>
                {{ template "speedtests" . }}
            </section>
            <section class="main-content-2">
                {{ if .Chart }}
                {{ template "chart" .Chart }}
                {{ else }}
                <p>
                    Speedtests conducted in a span of 2 hours will be shown as a
                    chart for further analysis. A minimum set of <b>3</b>
                    speedtests
                    is required to build the chart.
                </p>
                {{ end }}
            </section>
        </main>
    </body>
</html>
{{end}}